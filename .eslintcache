[{"C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\OME_FE_Draft\\ome-1\\src\\index.js":"1","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\OME_FE_Draft\\ome-1\\src\\reportWebVitals.js":"2","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\OME_FE_Draft\\ome-1\\src\\App.js":"3","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\OME_FE_Draft\\ome-1\\src\\components\\Home.js":"4","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\OME_FE_Draft\\ome-1\\src\\components\\Error.js":"5","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\OME_FE_Draft\\ome-1\\src\\components\\Header.js":"6","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\OME_FE_Draft\\ome-1\\src\\components\\modals\\SourceLinkModal.js":"7","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\OME_FE_Draft\\ome-1\\src\\components\\ReviewAlert.js":"8","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\OME_FE_Draft\\ome-1\\src\\history.js":"9"},{"size":238,"mtime":1653271467859,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1653063172149,"results":"12","hashOfConfig":"11"},{"size":526,"mtime":1656624264254,"results":"13","hashOfConfig":"11"},{"size":43365,"mtime":1657424647486,"results":"14","hashOfConfig":"11"},{"size":178,"mtime":1653065295223,"results":"15","hashOfConfig":"11"},{"size":764,"mtime":1656628467999,"results":"16","hashOfConfig":"11"},{"size":8551,"mtime":1655068933479,"results":"17","hashOfConfig":"11"},{"size":18581,"mtime":1657592974031,"results":"18","hashOfConfig":"11"},{"size":90,"mtime":1656624373999,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"l43k80",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\OME_FE_Draft\\ome-1\\src\\index.js",[],["42","43"],"C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\OME_FE_Draft\\ome-1\\src\\reportWebVitals.js",[],["44","45"],"C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\OME_FE_Draft\\ome-1\\src\\App.js",["46"],"import React from 'react';\nimport Home from './components/Home';\nimport Error from './components/Error';\nimport ReviewAlert from './components/ReviewAlert';\nimport { Router, Route, Switch } from 'react-router-dom';\nimport history from '../src/history';\n\nfunction App() {\n  return (\n    <>\n      <Router history={history}>\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/review\" exact component={ReviewAlert} />\n        </Switch>\n      </Router> \n    </>\n  );\n}\n\nexport default App;","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\OME_FE_Draft\\ome-1\\src\\components\\Home.js",["47","48","49","50","51","52","53","54","55","56","57","58","59","60","61"],"import React, { Component } from 'react';\r\nimport { Grid, Header, Icon, Select, Form, Button, Modal, Input, Radio, \r\n  TextArea, Popup, Segment, Divider, Dropdown, Dimmer, Loader } from 'semantic-ui-react'\r\nimport HeaderContent from './Header';\r\nimport moment from 'moment'\r\nimport \"filepond/dist/filepond.min.css\";\r\nimport axios from \"axios\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport SourceLinkModal from './modals/SourceLinkModal';\r\nconst _ = require(\"lodash\");\r\n// import csvFile from \"../../public\";\r\n// import TextareaAutocomplete from 'react-textarea-autocomplete'\r\n\r\n//JIRA task, check for delimiters - I'm currently splitting string based of ';' and if array exceeds length 50, I'm throwing an error. What else do I need to check for?\r\n\r\nexport default class Home extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        modalOpen: false,\r\n        sectionModalOpen: false,\r\n        AutomationModalOpen: false,\r\n        sourceLinkModalOpen: false,\r\n        alertDate: null,\r\n        keywords: [],\r\n        aliases: [],\r\n        lemmapp: \"\",\r\n        searchtype: \"\",\r\n        sourceClass: \"\",\r\n        user: \"\",\r\n        emailAlert: true,\r\n        summary: false,\r\n        relstories: false,\r\n        hisrelstories: false,\r\n        trendnews: false,\r\n        synrel: false,\r\n        mddar: false,\r\n        irrtextrem: false,\r\n        marelmat: false,\r\n        alertTitle: \"\",\r\n        alertDate: \"\",\r\n        sourceClassOptions: [],\r\n        sourceLinkOptions: [],\r\n        negsearchbool: \"\",\r\n        aliaslem: \"\",\r\n        senWoNegBool: false,\r\n        negalias: \"\",\r\n        negaliaslemm: \"\",\r\n        sourceLink: \"\",\r\n        alertCreationConfirmed: false,\r\n        createClicked: false,\r\n        error: false,\r\n        keywordOptions: [],\r\n        aliasesOptions: [],\r\n        loading: false,\r\n        includeLinks: [],\r\n        excludeLinks: [],\r\n        emailSubject: \"\",\r\n        subheadingOptions: [],\r\n        subheader: \"\",\r\n        subheaderOrder: \"\",\r\n        header: \"\",\r\n        headingOptions: [],\r\n        recepientList: \"\",\r\n        frequency: [],\r\n        frequencyOptions: []\r\n      };\r\n    }\r\n\r\n    handleClose = () => {this.setState({ modalOpen: false })}\r\n    handleModalOpen = () => this.setState({ modalOpen: true });\r\n\r\n    handleSectionModalClose = () => { this.setState({ sectionModalOpen: false })}\r\n    handleSectionModalOpen = () => { this.setState({ sectionModalOpen: true })}\r\n\r\n    handleAutomationModalClose = () => { this.setState({ AutomationModalOpen: false })}\r\n    handleAutomationModalOpen = () => { this.setState({ AutomationModalOpen: true })}\r\n\r\n    handleChange = (e, data) => {\r\n      console.log(data.name)\r\n      if(data.name===\"frequency\" && data.value.includes(\"Other\")) {\r\n        console.log(\"updating frequency options\")\r\n        let additionalFreqOptions = [\r\n          { key: '1', value: '1', text: '1' },\r\n          { key: '2', value: '2', text: '2' },\r\n          { key: '3', value: '3', text: '3' },\r\n          { key: '4', value: '4', text: '4' },\r\n          { key: '5', value: '5', text: '5' },\r\n          { key: '6', value: '6', text: '6' },\r\n          { key: '7', value: '7', text: '7' },\r\n          { key: '8', value: '8', text: '8' },\r\n          { key: '9', value: '9', text: '9' },\r\n          { key: '10', value: '10', text: '10' },\r\n          { key: '11', value: '11', text: '11' },\r\n          { key: '12', value: '12', text: '12' },\r\n          { key: '13', value: '13', text: '13' },\r\n          { key: '14', value: '14', text: '14' },\r\n          { key: '15', value: '15', text: '15' },\r\n          { key: '16', value: '16', text: '16' },\r\n          { key: '17', value: '17', text: '17' },\r\n          { key: '18', value: '18', text: '18' },\r\n          { key: '19', value: '19', text: '19' },\r\n          { key: '20', value: '20', text: '20' },\r\n          { key: '21', value: '21', text: '21' },\r\n          { key: '22', value: '22', text: '22' },\r\n          { key: '23', value: '23', text: '23' },\r\n          { key: '24', value: '24', text: '24' },\r\n          { key: '25', value: '25', text: '25' },\r\n          { key: '26', value: '26', text: '26' },\r\n          { key: '27', value: '27', text: '27' },\r\n          { key: '28', value: '28', text: '28' },\r\n          { key: '29', value: '29', text: '29' },\r\n          { key: '30', value: '30', text: '30' },\r\n          { key: '31', value: '31', text: '31' },\r\n        ]\r\n        let currentFreqOptions;\r\n        // currentFreqOptions = this.state.frequencyOptions;\r\n        // currentFreqOptions = currentFreqOptions.concat(additionalFreqOptions);\r\n\r\n        currentFreqOptions = additionalFreqOptions;\r\n        this.setState({\r\n          frequencyOptions: currentFreqOptions\r\n        })\r\n      } else {\r\n        this.setState({\r\n          ...this.state,\r\n          [data.name]: data.value\r\n        });\r\n      }\r\n    };\r\n\r\n    handleInputChange = (e) => {\r\n      this.setState({\r\n        ...this.state,\r\n        error: false,\r\n        [e.target.name]: e.target.value,\r\n        //createClicked: false\r\n      })\r\n      if(e.target.name===\"keywords\" || e.target.name===\"aliases\") {\r\n        let keywordsArray = this.state.keywords;\r\n        let aliasesArray= this.state.aliases;\r\n        if(keywordsArray.length > 5 || aliasesArray.length > 5) {\r\n          this.setState({\r\n            error: true,\r\n            createClicked: true\r\n          }, () => {\r\n            toast.error(\"Keywords/Aliases count cannot exceed 50 words\", {\r\n              position: \"top-right\",\r\n              autoClose: 5000,\r\n              hideProgressBar: false,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined\r\n            });\r\n          })\r\n        }\r\n      }\r\n    }\r\n\r\n    handleSourceClassAddition = (e, { value }) => {\r\n      this.setState((prevState) => ({\r\n        sourceClassOptions: [{ text: value, value }, ...prevState.sourceClassOptions],\r\n        sourceClass: value\r\n      }))\r\n    }\r\n\r\n    prepareSourceLink(csv) {\r\n      console.log(\"Inside prepareSourceLink\");\r\n      var lines = csv.split(\"\\n\");\r\n      var sourceClassOptions = [];\r\n\r\n      var headers=lines[0].split(\",\");\r\n\r\n      for(var i=1; i<lines.length; i++) {\r\n        var sourceLinkObject = {};\r\n        var splitArray = lines[i].split(\",\");\r\n        \r\n        let text = splitArray[0];\r\n        let value = splitArray[1];\r\n\r\n        sourceLinkObject.key = i;\r\n        sourceLinkObject.value = value;\r\n        sourceLinkObject.text = value;\r\n        \r\n        sourceClassOptions.push(sourceLinkObject);\r\n      }\r\n      return sourceClassOptions;\r\n    }\r\n\r\n    handleConfirmationModalClose = () => {\r\n      this.setState({\r\n        createClicked: false\r\n      })\r\n    }\r\n\r\n    async fetchCsv() {\r\n      const response = await fetch('data/link.csv');\r\n      const reader = response.body.getReader();\r\n      const result = await reader.read();\r\n      const decoder = new TextDecoder('utf-8');\r\n      const csv = decoder.decode(result.value);\r\n      console.log('csv', csv);\r\n      return this.prepareSourceLink(csv);\r\n    }\r\n\r\n    async componentWillMount() {\r\n      const response = await axios\r\n        .get('http://localhost:5000/keys')\r\n        .catch(err => {\r\n          console.log(\"error in Axios request\", err.message);\r\n        })\r\n      \r\n      console.log(\"response\", response)\r\n      \r\n      const givenAliases = response.data.aliases;\r\n      const givenKeywords = response.data.keywords;\r\n      const givenSubHeadings = response.data.subheadings;\r\n      const givenHeadings = response.data.headings;\r\n\r\n      let preparedAliases = [];\r\n      let preparedKeywords = [];\r\n\r\n      //every alias value in MySQL is a combination of aliases seperated by commas, so splitting them and pushing them into a seperate array\r\n      for(let alias of givenAliases) {\r\n        if(alias[0]!=null) {\r\n          let aliasElementArray = alias[0].split(',');\r\n          for (let elem of aliasElementArray) {\r\n            preparedAliases.push(elem);\r\n          }  \r\n        }\r\n      }\r\n      preparedAliases = _.uniq(preparedAliases);\r\n\r\n      for(let key of givenKeywords) {\r\n        if(key[0]!=null) {\r\n          let keyElementArray = key[0].split(',');\r\n          for (let elem of keyElementArray) {\r\n            preparedKeywords.push(elem);\r\n          }  \r\n        }\r\n      }\r\n      preparedKeywords = _.uniq(preparedKeywords);\r\n\r\n      let aliasesOptions = [];\r\n      for(let i=0; i<preparedAliases.length; i++) {\r\n        let object = {};\r\n        object.key = i;\r\n        object.text = preparedAliases[i];\r\n        object.value = preparedAliases[i];\r\n        aliasesOptions.push(object)\r\n      }\r\n\r\n      let keywordOptions = [];\r\n      for(let i=0; i<preparedKeywords.length; i++) {\r\n        let object = {};\r\n        object.key = i;\r\n        object.text = preparedKeywords[i];\r\n        object.value = preparedKeywords[i];\r\n        keywordOptions.push(object)\r\n      }\r\n\r\n      let localStorageKeywords = []\r\n      let localStorageAliases = [];\r\n      if(localStorage.getItem(\"keywords\")) {\r\n        localStorageKeywords = JSON.parse(localStorage.getItem(\"keywords\"))\r\n      }\r\n\r\n      let currentKeywordOptions = keywordOptions;\r\n      for(let key of localStorageKeywords) {\r\n        let obj = {};\r\n        obj.key = key;\r\n        obj.text = key;\r\n        obj.value = key;\r\n\r\n        currentKeywordOptions.push(obj)\r\n      }\r\n\r\n      if(localStorage.getItem(\"aliases\")) {\r\n        localStorageAliases = JSON.parse(localStorage.getItem(\"aliases\"))\r\n      }\r\n\r\n      let currentAliasesOptions = aliasesOptions;\r\n      for(let alias of localStorageAliases) {\r\n        let obj = {};\r\n        obj.key = alias;\r\n        obj.text = alias;\r\n        obj.value = alias;\r\n\r\n        currentAliasesOptions.push(obj)\r\n      }\r\n\r\n      console.log(\"currentAliasesOptions\", currentAliasesOptions);\r\n      console.log(\"currentKeywordOptions\", currentKeywordOptions);\r\n\r\n      let subheadingsOptions = [];\r\n      for(let sub of givenSubHeadings) {\r\n        let obj = {};\r\n        obj.key = sub[0];\r\n        obj.text = sub[0];\r\n        obj.value = sub[0];\r\n\r\n        subheadingsOptions.push(obj)\r\n      }\r\n\r\n      let headingOptions = [];\r\n      for(let sub of givenHeadings) {\r\n        let obj = {};\r\n        obj.key = sub[0];\r\n        obj.text = sub[0];\r\n        obj.value = sub[0];\r\n\r\n        headingOptions.push(obj)\r\n      }\r\n\r\n      this.setState({\r\n        ...this.state,\r\n        aliasesOptions,\r\n        keywordOptions,\r\n        keywords: localStorageKeywords,\r\n        aliases: localStorageAliases,\r\n        keywordOptions: currentKeywordOptions,\r\n        aliasesOptions: currentAliasesOptions,\r\n        subheadingOptions: subheadingsOptions,\r\n        headingOptions\r\n      })      \r\n    }\r\n\r\n    async componentDidMount() {\r\n      const currentDate = moment().format('YYYY-MM-DD');\r\n      const currentTime = moment().format('HH:mm')\r\n      let currentDateTime = `${currentDate}T${currentTime}`\r\n      currentDateTime = currentDateTime.split(' ')[0];\r\n\r\n      //reading csv contents from public/data/link.csv\r\n      const optionsData = await this.fetchCsv();\r\n\r\n      const sourceClassOptions = [\r\n        { key: 'all', value: 'all', text: 'ALL' },\r\n        { key: 'pr', value: 'Press releases', text: 'Press releases' },\r\n        { key: 'pmabs', value: 'Pub_Med Abstracts', text: 'Pub_Med Abstracts' },\r\n        { key: 'pmctext', value: 'PMC_text', text: 'PMC_text' }\r\n      ];\r\n\r\n      const frequencyOptions = [\r\n        { key: 'Monday', value: 'Monday', text: 'Monday' },\r\n        { key: 'Tuesday', value: 'Tuesday', text: 'Tuesday' },\r\n        { key: 'Wednesday', value: 'Wednesday', text: 'Wednesday' },\r\n        { key: 'Thursday', value: 'Thursday', text: 'Thursday' },\r\n        { key: 'Friday', value: 'Friday', text: 'Friday' },\r\n        { key: 'Saturday', value: 'Saturday', text: 'Saturday' },\r\n        { key: 'Sunday', value: 'Sunday', text: 'Sunday' },\r\n        { key: 'Other', value: 'Other', text: 'Other' }\r\n      ]\r\n\r\n      //getting from localStorage\r\n      this.setState({\r\n        ...this.state,\r\n        alertDate: currentDateTime,\r\n        sourceClassOptions,\r\n        sourceLinkOptions: optionsData,\r\n        frequencyOptions\r\n      })\r\n    }\r\n\r\n    handleCreateClick = async() => {\r\n      console.log(\"Inside handleCreateClick\")\r\n      this.setState({\r\n        createClicked: true\r\n      })\r\n    }\r\n\r\n    handleConfirmationResponseModalClose = () => {\r\n      this.setState({ alertCreationConfirmed: false})\r\n    }\r\n\r\n    renderConfirmationResponseModal = () => {\r\n      console.log(\"inside renderConfirmationResponseModal\")\r\n      return (\r\n        <Modal\r\n          open={this.state.alertCreationConfirmed}\r\n          onClose={this.handleConfirmationResponseModalClose}\r\n          closeIcon\r\n          size='small'\r\n          >\r\n            <Modal.Content>\r\n              <h2 style={{ textAlign: 'center'}}>\r\n                Alert Created! <Icon color=\"green\" name=\"check circle\" />\r\n              </h2>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n            <Button onClick={() => this.handleConfirmationResponseModalClose()}>\r\n              Close\r\n            </Button>\r\n          </Modal.Actions>\r\n        </Modal>\r\n      )\r\n    }\r\n\r\n    handleConfirmClick = async() => {\r\n      console.log(\"inside handleConfirmClick\")\r\n      //sending request to backend\r\n      const response = await axios\r\n      .post('http://localhost:5000/', this.state)\r\n      .catch(err => {\r\n        console.log(\"error in Axios request\", err.message);\r\n        toast.error(err.message, {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined\r\n        });\r\n        this.setState({\r\n          createClicked: false\r\n        })\r\n      })\r\n    console.log(\"response from create alert\", response);\r\n\r\n    //creating/updating localstorage\r\n    console.log(\"setting key-value pairs in localstorage\")\r\n    localStorage.setItem(\"keywords\", JSON.stringify(this.state.keywords));\r\n    localStorage.setItem(\"aliases\", JSON.stringify(this.state.aliases));\r\n\r\n      if(response.status === 200) {\r\n        this.setState({\r\n          alertCreationConfirmed: true,\r\n          createClicked: false\r\n        })\r\n      }\r\n    }\r\n\r\n    renderConfirmationModal = () => {\r\n      console.log(\"inside renderConfirmationModal\")\r\n      return (\r\n        <Modal\r\n          open={this.state.createClicked}\r\n          onClose={this.handleConfirmationModalClose}\r\n          closeIcon\r\n          size='small'\r\n          >\r\n            <Header>Confirm Alert</Header>\r\n            <Modal.Content>\r\n              <Form>\r\n                <Form.Field inline>\r\n                <label style={{ marginRight: \"20px\"}}>Email Subject</label>\r\n                <input\r\n                  name=\"emailSubject\"\r\n                  style={{ marginLeft: \"25px\", minWidth: \"400px\" }} \r\n                  placeholder=\"Enter email subject line\"\r\n                  value={this.state.emailSubject}\r\n                  onChange={this.handleInputChange}\r\n                />\r\n                </Form.Field>\r\n\r\n                <Form.Field inline>\r\n                <label style={{ marginRight: \"77px\"}}>Heading</label>\r\n                <Dropdown\r\n                  name= 'header'\r\n                  placeholder= 'Select header'\r\n                  selection\r\n                  search\r\n                  options={this.state.headingOptions} \r\n                  onChange={this.handleChange}\r\n                  value={this.state.header}\r\n                  allowAdditions\r\n                  onAddItem={this.handleHeadingAddition}\r\n                />\r\n                </Form.Field>\r\n\r\n                <Form.Field inline>\r\n                <label style={{ marginRight: \"55px\"}}>Sub heading</label>\r\n                <Dropdown\r\n                  name= 'subheader'\r\n                  placeholder= 'Select subheading'\r\n                  selection\r\n                  search\r\n                  options={this.state.subheadingOptions} \r\n                  onChange={this.handleChange}\r\n                  value={this.state.subheader}\r\n                  allowAdditions\r\n                  onAddItem={this.handleSubHeadingAddition}\r\n                />\r\n                </Form.Field>\r\n\r\n                <Form.Field inline>\r\n                  <label style={{ marginRight: \"20px\"}}>Sub heading order</label>\r\n                  <input\r\n                    name=\"subheaderOrder\"\r\n                    placeholder=\"Select subheading order\"\r\n                    value={this.state.subheaderOrder}\r\n                    onChange={this.handleInputChange}\r\n                    style={{ width: \"195px\"}}\r\n                  />\r\n                </Form.Field>\r\n\r\n                <Form.Field>\r\n                  <label>Recepient List</label>\r\n                  <TextArea\r\n                    name=\"recepientList\"\r\n                    style={{ minHeight: 50 }} \r\n                    placeholder=\"Enter recepient list\"\r\n                    onChange={this.handleInputChange}\r\n                    value={this.state.recepientList}\r\n                  />\r\n                </Form.Field>\r\n\r\n                <Form.Field inline>\r\n                  <label style={{ marginRight: \"55px\"}}>Frequency</label>\r\n                  <Dropdown\r\n                    name= 'frequency'\r\n                    placeholder= 'Select frequency'\r\n                    selection\r\n                    search\r\n                    options={this.state.frequencyOptions} \r\n                    onChange={this.handleChange}\r\n                    value={this.state.frequency}\r\n                    multiple\r\n                  />\r\n                </Form.Field>\r\n              </Form>\r\n\r\n              {/* Stuff like ordering sub headings */}\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n              <Button color='red' onClick={() => this.handleConfirmationModalClose()}>\r\n                <Icon name='remove' /> Cancel\r\n              </Button>\r\n              <Button color='green' onClick={() => this.handleConfirmClick()}>\r\n                <Icon name='checkmark' /> Confirm\r\n              </Button>\r\n          </Modal.Actions>\r\n        </Modal>\r\n      )\r\n    }\r\n\r\n    handleKeywordsFile = (e) => {\r\n      e.preventDefault();\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        const text = e.target.result;\r\n        console.log(text);\r\n        let keywordsArray = text.split(';');\r\n        if(keywordsArray.length > 5) {\r\n          this.setState({\r\n            error: true,\r\n            createClicked: true\r\n          }, () => {\r\n            toast.error(\"Keywords count cannot exceed 50 words\", {\r\n              position: \"top-right\",\r\n              autoClose: 5000,\r\n              hideProgressBar: false,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined\r\n            });\r\n          })\r\n          \r\n        } else {\r\n\r\n          let currentKeywordOptions = this.state.keywordOptions;\r\n          for(let key of keywordsArray) {\r\n            let obj = {};\r\n            obj.key = key;\r\n            obj.text = key;\r\n            obj.value = key\r\n            currentKeywordOptions.push(obj)\r\n          }\r\n          this.setState({\r\n            keywords: keywordsArray,\r\n            keywordOptions: currentKeywordOptions,\r\n            error: false,\r\n            createClicked: false\r\n          })\r\n        }\r\n      };\r\n      reader.readAsText(e.target.files[0]);\r\n    };\r\n\r\n    handleAliasesFile = (e) => {\r\n      e.preventDefault();\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        const text = e.target.result;\r\n        console.log(text);\r\n        let aliasesArray = text.split(';');\r\n        if(aliasesArray.length > 5) {\r\n          this.setState({\r\n            error: true,\r\n            createClicked: true\r\n          }, () => {\r\n            toast.error(\"Aliases count cannot exceed 50 words\", {\r\n              position: \"top-right\",\r\n              autoClose: 5000,\r\n              hideProgressBar: false,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined\r\n            });\r\n          })\r\n        } else {\r\n          let currentAliasesOptions = this.state.aliasesOptions;\r\n          for(let alias of aliasesArray) {\r\n            let obj = {};\r\n            obj.key = alias;\r\n            obj.text = alias;\r\n            obj.value = alias\r\n            currentAliasesOptions.push(obj)\r\n          }\r\n          this.setState({\r\n            aliases: aliasesArray,\r\n            aliasesOptions: currentAliasesOptions,\r\n            error: false,\r\n            createClicked: false\r\n          })\r\n        }\r\n      };\r\n      reader.readAsText(e.target.files[0]);\r\n    };\r\n\r\n    handleKeywordsAddition = (e, { value }) => {\r\n      this.setState((prevState) => ({\r\n        keywordOptions: [{ text: value, value }, ...prevState.keywordOptions],\r\n      }))\r\n    }\r\n\r\n    handleSubHeadingAddition = (e, { value }) => {\r\n      this.setState((prevState) => ({\r\n        subheadingOptions: [{ text: value, value }, ...prevState.subheadingOptions],\r\n      }))\r\n    }\r\n\r\n    handleHeadingAddition = (e, { value }) => {\r\n      this.setState((prevState) => ({\r\n        headingOptions: [{ text: value, value }, ...prevState.headingOptions],\r\n      }))\r\n    }\r\n\r\n    handleAliasAddition = (e, { value }) => {\r\n      this.setState((prevState) => ({\r\n        aliasesOptions: [{ text: value, value }, ...prevState.aliasesOptions],\r\n      }))\r\n    }\r\n\r\n    addSelectedSourceLinkToState = (includeLinks, excludeLinks) => {\r\n      console.log(\"inside addSelectedSourceLinkToState\")\r\n      this.setState({\r\n        includeLinks,\r\n        excludeLinks\r\n      })\r\n    }\r\n    \r\n    render() {\r\n      console.log(\"state\", this.state);\r\n      const currentDate = moment().format('YYYY-MM-DD');\r\n      const currentTime = moment().format('HH:mm')\r\n      const currentDateTime = `${currentDate}T${currentTime}`\r\n      console.log('currentDateTime', currentDateTime)\r\n\r\n      const lemmAppOptions = [\r\n        { key: 'null', value: 'NULL', text: 'NULL' },\r\n        { key: 'al', value: 'all_lem', text: 'all_lem' },\r\n        { key: 'as', value: 'all_stem', text: 'all_stem' }\r\n      ]\r\n\r\n      const searchTypeOptions = [\r\n        { key: 'cooc', value: 'cooccurence', text: 'cooccurence' },\r\n        { key: 'coocdist', value: 'cooccurence_[KW_distance]', text: 'cooccurence_[KW_distance]' },\r\n        { key: 'std', value: 'standard', text: 'standard' },\r\n        { key: 'stdtitle', value: 'standard title', text: 'standard title' },\r\n        { key: 'coocmulali', value: 'cooccurrence_mult_alias', text: 'cooccurrence_mult_alias' },\r\n        { key: 'coocmulalidist', value: 'cooccurrence_mult_alias_[KW_DISTANCE]', text: 'cooccurrence_mult_alias_[KW_DISTANCE]' }\r\n      ]\r\n\r\n      const negSearchBoolOptions = [\r\n        { key: 'null', value: 'NULL', text: 'NULL' },\r\n        { key: 'and', value: 'AND', text: 'AND' },\r\n        { key: 'or', value: 'OR', text: 'OR' },\r\n        { key: 'notURL', value: 'NOT_URL', text: 'NOT_URL' }\r\n      ]\r\n      \r\n        return (\r\n          <div style={{ marginLeft: \"50px\", alignItems: \"center\"  }}>\r\n            {this.state.loading && (\r\n              <Segment style={{ marginTop: '40px', height: '400px', marginRight: \"50px\"}}>\r\n                <Dimmer active inverted>\r\n                  <Loader inverted content='Loading' />\r\n                </Dimmer>\r\n              </Segment>\r\n            )}\r\n            {!this.state.loading && (\r\n              <div>\r\n              <ToastContainer\r\n              position=\"top-right\"\r\n              autoClose={5000}\r\n              hideProgressBar={false}\r\n              newestOnTop={false}\r\n              closeOnClick\r\n              rtl={false}\r\n              pauseOnFocusLoss\r\n              draggable\r\n              pauseOnHover\r\n              theme='colored'\r\n            />\r\n            <HeaderContent />\r\n            {/* <p>{this.state.output.hello}</p>\r\n            <p>{this.state.output.results}</p> */}\r\n            <Grid columns={3} style={{ marginTop: \"20px\"}}>\r\n              <Grid.Row>\r\n                <Grid.Column>\r\n                <Form style={{ marginRight: \"40px\"}}>\r\n                \r\n                  <Form.Field inline error={this.state.error}>\r\n                    <label style={{ marginRight: \"50px\"}}>Keywords</label>\r\n                    <Dropdown\r\n                      name = 'keywords'\r\n                      placeholder='Enter keywords' \r\n                      fluid \r\n                      multiple \r\n                      selection\r\n                      search\r\n                      options={this.state.keywordOptions} \r\n                      onChange={this.handleChange}\r\n                      value={this.state.keywords}\r\n                      allowAdditions\r\n                      onAddItem={this.handleKeywordsAddition}\r\n                    />\r\n                    \r\n                    <div style={{ marginTop: \"10px\"}}>\r\n                    <Popup content='Keywords must be delimited by a semicolon (;)' trigger={\r\n                      <input style={{border: \"none\", backgroundColor: \"transparent\", resize: \"none\", outline: \"none\"}} type=\"file\" \r\n                        onChange={this.handleKeywordsFile} />\r\n                    } />\r\n                    </div>\r\n                  </Form.Field>\r\n                \r\n                  \r\n                </Form>\r\n                <Form style={{ marginTop: \"40px\"}}>\r\n                    <Form.Field inline style={{ marginRight: \"40px\"}} error={this.state.error}>\r\n                      <label style={{ marginRight: \"50px\"}}>Aliases</label>\r\n                      <Dropdown\r\n                        name = 'aliases'\r\n                        placeholder='Enter aliases' \r\n                        fluid \r\n                        multiple \r\n                        selection\r\n                        search \r\n                        options={this.state.aliasesOptions} \r\n                        onChange={this.handleChange}\r\n                        allowAdditions\r\n                        onAddItem={this.handleAliasAddition}\r\n                        value={this.state.aliases}\r\n                      />\r\n                      <Popup content='Aliases must be delimited by a semicolon (;)' trigger={\r\n                        <div style={{ marginTop: \"10px\"}}>\r\n                          <input style={{border: \"none\", backgroundColor: \"transparent\", resize: \"none\", outline: \"none\"}} type=\"file\" onChange={this.handleAliasesFile} />\r\n                        </div>\r\n                      } />\r\n                    </Form.Field>\r\n                </Form>\r\n                </Grid.Column>\r\n                  <Form>\r\n                    <Form.Field inline>\r\n                      <label style={{ marginRight: \"20px\"}}>Search type</label>\r\n                      <Select\r\n                        style={{ marginLeft: \"18px\", minWidth:\"230px\"}} \r\n                        placeholder='Select type'\r\n                        name = 'searchtype'\r\n                        value={this.state.searchtype}\r\n                        options={searchTypeOptions} \r\n                        onChange={this.handleChange}\r\n                        search\r\n                      />\r\n                    </Form.Field>\r\n                    <Segment>\r\n                    <Grid columns={2} relaxed='very'>\r\n                      <Grid.Column>\r\n                        <Form.Field>\r\n                          <label>Source class</label>\r\n                          <Select \r\n                            style={{ minWidth:\"100px\"}} \r\n                            placeholder='Select source'\r\n                            name = 'sourceClass'\r\n                            search\r\n                            value={this.state.sourceClass}\r\n                            options={this.state.sourceClassOptions} \r\n                            onChange={this.handleChange}\r\n                            allowAdditions\r\n                            onAddItem={this.handleSourceClassAddition}\r\n                          />\r\n                        </Form.Field>\r\n                      </Grid.Column>\r\n                      <Grid.Column>\r\n                        <SourceLinkModal \r\n                          options={this.state.sourceLinkOptions}\r\n                          parentCallback={this.addSelectedSourceLinkToState}\r\n                        />\r\n                      </Grid.Column>\r\n                    </Grid>\r\n\r\n                      <Divider vertical>OR</Divider>\r\n                    </Segment>\r\n\r\n                    <Modal\r\n                      size='tiny'\r\n                      closeIcon\r\n                      trigger={<Button style={{ marginTop: \"17px\"}}>Automation efforts</Button>}\r\n                      onOpen={this.handleAutomationModalOpen}\r\n                      onClose={this.handleAutomationModalClose}\r\n                      open={this.state.AutomationModalOpen}\r\n                    >\r\n                    <Header content='Automation efforts' />\r\n                      <Modal.Content>\r\n                        <Form style={{ marginBottom: \"20px\"}}>\r\n                          <Form.Field inline >\r\n                          <label ><b>Syntactical Relevance Model</b></label>\r\n                          <Radio\r\n                            toggle\r\n                            name=\"synrel\"\r\n                            style={{ marginLeft: \"250px\"}}\r\n                            onChange={(e, data) => {\r\n                              this.state.synrel = data.checked\r\n                            }}\r\n                            value={this.state.synrel}\r\n                          />\r\n                          </Form.Field>\r\n                          <Form.Field inline style={{ marginTop: \"5px\"}}>\r\n                            <label ><b>Main disease detection and Adjacency ranking</b></label>\r\n                            <Radio\r\n                              toggle\r\n                              style={{ marginLeft: \"150px\"}}\r\n                              name=\"mddar\"\r\n                              onChange={(e, data) => {\r\n                                this.state.mddar = data.checked\r\n                              }}\r\n                              value={this.state.mddar}\r\n                            />\r\n                          </Form.Field>\r\n                          <Form.Field inline style={{ marginTop: \"5px\"}}>\r\n                            <label ><b>Irrelevant text removal</b></label>\r\n                            <Radio\r\n                              toggle\r\n                              name=\"irrtextrem\"\r\n                              style={{ marginLeft: \"282px\"}}\r\n                              onChange={(e, data) => {\r\n                                this.state.irrtextrem = data.checked\r\n                              }}\r\n                              value={this.state.irrtextrem}\r\n                            />\r\n                          </Form.Field>\r\n                          <Form.Field inline style={{ marginTop: \"5px\"}}>\r\n                            <label ><b>M&A relevancy matrix</b></label>\r\n                            <Radio\r\n                              toggle\r\n                              style={{ marginLeft: \"285px\"}}\r\n                              name=\"marelmat\"\r\n                              onChange={(e, data) => {\r\n                                this.state.marelmat = data.checked\r\n                              }}\r\n                              value={this.state.marelmat}\r\n                            />\r\n                          </Form.Field>\r\n                        </Form>\r\n                        \r\n                      </Modal.Content>\r\n                      <Modal.Actions>\r\n                          <Button color='green' onClick={this.handleAutomationModalClose}>\r\n                            <Icon name='checkmark' /> OK\r\n                          </Button>\r\n                      </Modal.Actions>\r\n                    </Modal>\r\n                    \r\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                    <Modal\r\n                      size='tiny'\r\n                      closeIcon\r\n                      trigger={<Button style={{ marginTop: \"17px\"}}>Section Add-on</Button>}\r\n                      onOpen={this.handleSectionModalOpen}\r\n                      onClose={this.handleSectionModalClose}\r\n                      open={this.state.sectionModalOpen}\r\n                    >\r\n                    <Header content='Section Add-ons' />\r\n                      <Modal.Content>\r\n                        <Form style={{ marginBottom: \"20px\"}}>\r\n                          <Form.Field inline >\r\n                          <label ><b>Summary</b></label>\r\n                          <Radio\r\n                            toggle\r\n                            name=\"summary\"\r\n                            style={{ marginLeft: \"353px\"}}\r\n                            onChange={(e, data) => {\r\n                              this.state.summary = data.checked\r\n                            }}\r\n                            value={this.state.summary}\r\n                          />\r\n                          </Form.Field>\r\n                          <Form.Field inline style={{ marginTop: \"5px\"}}>\r\n                            <label ><b>Related stories</b></label>\r\n                            <Radio\r\n                              toggle\r\n                              style={{ marginLeft: \"322px\"}}\r\n                              name=\"relstories\"\r\n                              onChange={(e, data) => {\r\n                                this.state.relstories = data.checked\r\n                              }}\r\n                              value={this.state.relstories}\r\n                            />\r\n                          </Form.Field>\r\n                          <Form.Field inline style={{ marginTop: \"5px\"}}>\r\n                            <label ><b>Historical related stories</b></label>\r\n                            <Radio\r\n                              toggle\r\n                              name=\"hisrelstories\"\r\n                              style={{ marginLeft: \"266px\"}}\r\n                              onChange={(e, data) => {\r\n                                this.state.hisrelstories = data.checked\r\n                              }}\r\n                              value={this.state.hisrelstories}\r\n                            />\r\n                          </Form.Field>\r\n                          <Form.Field inline style={{ marginTop: \"5px\"}}>\r\n                            <label ><b>Trending news</b></label>\r\n                            <Radio\r\n                              toggle\r\n                              style={{ marginLeft: \"326px\"}}\r\n                              name=\"trendnews\"\r\n                              onChange={(e, data) => {\r\n                                this.state.trendnews = data.checked\r\n                              }}\r\n                              value={this.state.trendnews}\r\n                            />\r\n                          </Form.Field>\r\n                        </Form>\r\n                        \r\n                      </Modal.Content>\r\n                      <Modal.Actions>\r\n                          <Button color='green' onClick={this.handleSectionModalClose}>\r\n                            <Icon name='checkmark' /> OK\r\n                          </Button>\r\n                      </Modal.Actions>\r\n                    </Modal>\r\n\r\n                    <Form.Field inline style={{ marginTop: \"50px\"}}>\r\n                      <label>Lemmatizer Application</label>\r\n                      <Select\r\n                        style={{ minWidth: \"185px\"}}\r\n                        placeholder='Enter type'\r\n                        name = 'lemmapp'\r\n                        value={this.state.lemmapp}\r\n                        options={lemmAppOptions} \r\n                        onChange={this.handleChange}\r\n                        search\r\n                      />\r\n                    </Form.Field>\r\n                    <Modal\r\n                      size='small'\r\n                      closeIcon\r\n                      trigger={<Button style={{ marginTop: \"17px\"}}>Lemmatizer options</Button>}\r\n                      onOpen={this.handleModalOpen}\r\n                      onClose={this.handleClose}\r\n                      open={this.state.modalOpen}\r\n                    >\r\n                    <Header content='Lemmatizer options' />\r\n                      <Modal.Content>\r\n                          <Form>\r\n                              <Form.Field inline>\r\n                                <label><b>Alias lemmatization</b></label>\r\n                                <input\r\n                                  name=\"aliaslemm\"\r\n                                  style={{ marginLeft: \"100px\", minWidth: \"400px\"}} \r\n                                  placeholder=\"Enter alias lemmatization\"\r\n                                  onChange={this.handleInputChange}\r\n                                  value={this.state.aliaslem}\r\n                                />\r\n                              </Form.Field>\r\n                              <Form.Field inline>\r\n                                <label ><b>Negative aliases</b></label>\r\n                                <input \r\n                                  name=\"negalias\" \r\n                                  style={{ marginLeft: \"122px\", minWidth: \"400px\"}}\r\n                                  placeholder=\"Enter negative alias\"\r\n                                  onChange={this.handleInputChange}\r\n                                  value={this.state.negalias}\r\n                                />\r\n                              </Form.Field>\r\n                              <Form.Field inline>\r\n                                <label ><b>Negative search boolean</b></label>\r\n                                <Select \r\n                                  name=\"negsearchbool\" \r\n                                  style={{ marginLeft: \"73px\", minWidth: \"400px\"}}\r\n                                  value={this.state.negsearchbool}\r\n                                  options={negSearchBoolOptions} \r\n                                  onChange={this.handleChange}\r\n                                  search\r\n                                  placeholder=\"Enter negative search boolean\"\r\n                                />\r\n                              </Form.Field>\r\n                              <Form.Field inline>\r\n                                <label><b>Negative alias lemmatization</b></label>\r\n                                <input \r\n                                  name=\"negaliaslemm\"\r\n                                  style={{ marginLeft: \"48px\", minWidth: \"400px\"}}\r\n                                  placeholder=\"Enter negative alias lemmatization\"\r\n                                  onChange={this.handleInputChange}\r\n                                  value={this.state.negaliaslemm}\r\n                                />\r\n                              </Form.Field>\r\n                              <Form.Field inline>\r\n                                <label ><b>Sentence without negative boolean</b></label>\r\n                                <Radio\r\n                                  style={{ marginLeft: \"12px\"}}\r\n                                  toggle\r\n                                  name=\"senWoNegBool\"\r\n                                  onChange={(e, data) => {\r\n                                    this.state.senWoNegBool = data.checked\r\n                                  }}\r\n                                  value={this.state.senWoNegBool}\r\n                                />\r\n                              </Form.Field>\r\n                          </Form>\r\n                      </Modal.Content>\r\n                      <Modal.Actions>\r\n                          <Button color='red' onClick={this.handleClose}>\r\n                            <Icon name='remove' /> Cancel\r\n                          </Button>\r\n                          <Button color='green' onClick={this.handleClose}>\r\n                            <Icon name='checkmark' /> Confirm\r\n                          </Button>\r\n                      </Modal.Actions>\r\n                    </Modal>\r\n                    \r\n                  </Form>\r\n                  \r\n                <Grid.Column>\r\n                  \r\n                  <Form style={{marginLeft: \"58px\"}}>\r\n                    <Form.Field inline>\r\n                      <label style={{ marginRight: \"30px\"}}>User</label>\r\n                      <Input\r\n                        name=\"user\"\r\n                        style={{ marginLeft: \"25px\" }} \r\n                        placeholder=\"Enter user\"\r\n                        value={this.state.user}\r\n                        onChange={this.handleInputChange}\r\n                      />\r\n                    </Form.Field>\r\n                    <Form.Field inline>\r\n                      <label >Email alert</label>\r\n                      <Radio \r\n                        toggle\r\n                        name=\"emailAlert\"\r\n                        style={{ marginLeft: \"15px\"}}\r\n                        onChange={(e, data) => {\r\n                          this.state.emailAlert = data.checked\r\n                        }}\r\n                        value={this.state.emailAlert}\r\n                        defaultChecked\r\n                      />\r\n                    </Form.Field>\r\n\r\n                    <Form.Field inline>\r\n                      <label style={{ marginRight: \"25px\"}}>Alert title</label>\r\n                      <Input \r\n                        placeholder=\"Enter title\"\r\n                        name=\"alertTitle\" \r\n                        value={this.state.alertTitle}\r\n                        onChange={this.handleInputChange}\r\n                      />\r\n                    </Form.Field>\r\n                    \r\n                    <Form.Field inline>\r\n                      <label style={{ marginRight: \"15px\"}}>Date added</label>\r\n                      <input \r\n                        type=\"datetime-local\" \r\n                        min={currentDateTime.split(' ')[0]}\r\n                        value={this.state.alertDate}\r\n                        name=\"alertDate\"\r\n                        onChange={this.handleInputChange}\r\n                        />\r\n                    </Form.Field>\r\n\r\n                    <Button \r\n                      primary \r\n                      style={{ marginTop: \"10px\"}} \r\n                      onClick={this.handleCreateClick}\r\n                      disabled={this.state.createClicked}\r\n                    >\r\n                      Create\r\n                    </Button>\r\n                  </Form>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n            </Grid>\r\n            {this.state.alertCreationConfirmed && this.renderConfirmationResponseModal()}\r\n              </div>\r\n            )}\r\n            {this.state.createClicked && this.renderConfirmationModal()}\r\n          </div>\r\n        );\r\n      }\r\n}","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\OME_FE_Draft\\ome-1\\src\\components\\Error.js",[],"C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\OME_FE_Draft\\ome-1\\src\\components\\Header.js",[],"C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\OME_FE_Draft\\ome-1\\src\\components\\modals\\SourceLinkModal.js",[],"C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\OME_FE_Draft\\ome-1\\src\\components\\ReviewAlert.js",[],"C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\OME_FE_Draft\\ome-1\\src\\history.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"62","replacedBy":"66"},{"ruleId":"64","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":3,"column":8,"nodeType":"70","messageId":"71","endLine":3,"endColumn":13},{"ruleId":"72","severity":1,"message":"73","line":42,"column":9,"nodeType":"74","messageId":"75","endLine":42,"endColumn":18},{"ruleId":"68","severity":1,"message":"76","line":174,"column":11,"nodeType":"70","messageId":"71","endLine":174,"endColumn":18},{"ruleId":"68","severity":1,"message":"77","line":180,"column":13,"nodeType":"70","messageId":"71","endLine":180,"endColumn":17},{"ruleId":"72","severity":1,"message":"78","line":323,"column":9,"nodeType":"74","messageId":"75","endLine":323,"endColumn":23},{"ruleId":"72","severity":1,"message":"79","line":324,"column":9,"nodeType":"74","messageId":"75","endLine":324,"endColumn":23},{"ruleId":"80","severity":1,"message":"81","line":828,"column":31,"nodeType":"82","messageId":"83","endLine":828,"endColumn":41},{"ruleId":"80","severity":1,"message":"81","line":840,"column":33,"nodeType":"82","messageId":"83","endLine":840,"endColumn":43},{"ruleId":"80","severity":1,"message":"81","line":852,"column":33,"nodeType":"82","messageId":"83","endLine":852,"endColumn":43},{"ruleId":"80","severity":1,"message":"81","line":864,"column":33,"nodeType":"82","messageId":"83","endLine":864,"endColumn":43},{"ruleId":"80","severity":1,"message":"81","line":898,"column":31,"nodeType":"82","messageId":"83","endLine":898,"endColumn":41},{"ruleId":"80","severity":1,"message":"81","line":910,"column":33,"nodeType":"82","messageId":"83","endLine":910,"endColumn":43},{"ruleId":"80","severity":1,"message":"81","line":922,"column":33,"nodeType":"82","messageId":"83","endLine":922,"endColumn":43},{"ruleId":"80","severity":1,"message":"81","line":934,"column":33,"nodeType":"82","messageId":"83","endLine":934,"endColumn":43},{"ruleId":"80","severity":1,"message":"81","line":1021,"column":37,"nodeType":"82","messageId":"83","endLine":1021,"endColumn":47},{"ruleId":"80","severity":1,"message":"81","line":1060,"column":27,"nodeType":"82","messageId":"83","endLine":1060,"endColumn":37},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],["84"],["85"],"no-unused-vars","'Error' is defined but never used.","Identifier","unusedVar","no-dupe-keys","Duplicate key 'alertDate'.","ObjectExpression","unexpected","'headers' is assigned a value but never used.","'text' is assigned a value but never used.","Duplicate key 'keywordOptions'.","Duplicate key 'aliasesOptions'.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","no-global-assign","no-unsafe-negation"]